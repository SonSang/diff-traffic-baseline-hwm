# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
do_not_include_H_from_C 
header_name {.hpp} 
code_name {.cpp}
Function {update_tod(double val)} {open private
} {
  code {sim_win->time_offset = 60*60*val;
sim_win->redraw();} {}
} 

Function {toggle_lights(bool val)} {open private
} {
  code {sim_win->do_lights = val;
sim_win->redraw();} {}
} 

Function {set_network_draw(int val)} {open
} {
  code {sim_win->network_draw = (fltkview::network_draw_mode)val;
sim_win->redraw();} {}
} 

Function {toggle_screenshot(bool val)} {open private
} {
  code {sim_win->screenshot_mode = val;
sim_win->redraw();} {}
} 

Function {toggle_go(bool val)} {open private
} {
  code {sim_win->go = val;
sim_win->redraw();} {}
} 

Function {toggle_throttle(double val)} {open private
} {
  code {sim_win->throttle = val;
sim_win->set_throttle();
sim_win->redraw();} {}
} 

Function {set_bg_saturation(double val)} {open private
} {
  code {sim_win->bg_saturation = val;
sim_win->redraw();} {}
} 

Function {set_fg_saturation(double val)} {open private
} {
  code {sim_win->fg_saturation = val;
sim_win->redraw();} {}
} 

Function {set_imode(int val)} {open private
} {
  code {sim_win->imode = (fltkview::interaction_mode)val;
sim_win->redraw();} {}
} 

Function {set_obey_scale(bool val)} {open private
} {
  code {sim_win->view.obey_scale = val;
sim_win->redraw();} {}
} 

Function {set_path_param(double val)} {open private
} {
  code {sim_win->path_param = val;
sim_win->redraw();} {}
} 

Function {set_obey_position(bool val)} {open private
} {
  code {sim_win->view.obey_position = val;
sim_win->redraw();} {}
} 

Function {set_path_auto_advance(bool val)} {open private
} {
  code {sim_win->path_auto_advance = val;
sim_win->path_param = 0;
sim_win->redraw();} {}
} 

Function {set_path_param_rate(double val)} {open private
} {
  code {sim_win->path_param_rate = val;} {}
} 

Function {toggle_show_lengths(bool val)} {open private
} {
  code {sim_win->show_lengths = val;
sim_win->redraw();} {}
} 

Function {toggle_cars(bool val)} {open private
} {
  code {sim_win->do_cars = val;
sim_win->redraw();} {}
} 

Function {make_window()} {open private
} {
  Fl_Window {} {open
    xywh {57 313 2105 1220} type Double visible
  } {
    Fl_Box sim_win {selected
      xywh {10 5 1920 1080} box DOWN_FRAME hotspot
      class fltkview
    }
    Fl_Slider {} {
      label {Time of day} user_data_type {void*}
      callback {update_tod(o->value());}
      private xywh {5 1089 2095 26} type Horizontal maximum 24 step 0.05
      code0 {o->value(sim_win->time_offset);}
    }
    Fl_Light_Button {} {
      label {Draw lights}
      callback {toggle_lights(o->value());}
      private xywh {1940 591 150 25}
      code0 {o->value(sim_win->do_lights);}
    }
    Fl_Choice {} {
      label Roads
      callback {set_network_draw(o->value());} open
      private xywh {1986 529 110 25} down_box BORDER_BOX
      code0 {o->value(sim_win->network_draw);}
    } {
      MenuItem {} {
        label None
        private xywh {0 0 100 20}
      }
      MenuItem {} {
        label Abstract
        private xywh {0 0 100 20}
      }
      MenuItem {} {
        label Textured
        private xywh {10 10 100 20}
      }
    }
    Fl_Light_Button {} {
      label Record
      callback {toggle_screenshot(o->value());}
      private xywh {1945 38 147 25}
      code0 {o->value(sim_win->screenshot_mode);}
    }
    Fl_Light_Button {} {
      label {Go!}
      callback {toggle_go(o->value());}
      private xywh {1940 75 70 25}
      code0 {o->value(sim_win->go);}
    }
    Fl_Light_Button {} {
      label Throttle
      callback {toggle_throttle(o->value());}
      private xywh {2015 75 80 25}
      code0 {o->value(sim_win->throttle);}
    }
    Fl_Slider {} {
      label {bg saturation}
      callback {set_bg_saturation(o->value());}
      private xywh {1945 636 150 20} type Horizontal align 1 step 0.01
      code0 {o->value(sim_win->bg_saturation);}
    }
    Fl_Slider {} {
      label {fg saturation}
      callback {set_fg_saturation(o->value());}
      private xywh {1945 677 150 20} type Horizontal align 1 step 0.01
      code0 {o->value(sim_win->fg_saturation);}
    }
    Fl_Choice {} {
      label Mode
      callback {set_imode(o->value());} open
      private xywh {1985 5 110 25} down_box BORDER_BOX
      code0 {o->value(sim_win->imode);}
    } {
      MenuItem {} {
        label REGION_MANIP
        private xywh {10 10 100 20} labelsize 10
      }
      MenuItem {} {
        label ARC_MANIP
        private xywh {20 20 100 20} labelsize 10
      }
      MenuItem {} {
        label MC_PREVIEW
        private xywh {30 30 100 20} labelsize 10
      }
      MenuItem {} {
        label BACK_MANIP
        private xywh {40 40 100 20} labelsize 10
      }
      MenuItem {} {
        label NONE
        private xywh {50 50 100 20} labelsize 10
      }
    }
    Fl_Slider view_slider {
      label {View param} user_data_type {void*}
      callback {set_path_param(o->value());}
      xywh {5 1136 2095 20} type Horizontal
      code0 {o->value(sim_win->path_param);}
    }
    Fl_Light_Button {} {
      label Scale
      callback {set_obey_scale(o->value());}
      private xywh {2020 790 80 25}
      code0 {o->value(sim_win->view.obey_scale);}
    }
    Fl_Light_Button {} {
      label Position
      callback {set_obey_position(o->value());}
      private xywh {2020 760 78 25}
      code0 {o->value(sim_win->view.obey_position);}
    }
    Fl_Light_Button {} {
      label {Follow t}
      callback {set_path_auto_advance(o->value());}
      private xywh {1935 770 78 25}
      code0 {o->value(sim_win->path_auto_advance);}
    }
    Fl_Slider view_rate_slider {
      label {View param rate} user_data_type {void*}
      callback {set_path_param_rate(o->value());}
      private xywh {5 1173 2095 22} type Horizontal maximum 0.2
      code0 {o->value(sim_win->path_param_rate);}
    }
    Fl_Light_Button {} {
      label {Draw lengths}
      callback {toggle_show_lengths(o->value());}
      private xywh {1945 705 150 25}
      code0 {o->value(sim_win->show_lengths);}
    }
    Fl_Light_Button {} {
      label {Draw cars}
      callback {toggle_cars(o->value());}
      private xywh {1940 560 150 25}
      code0 {o->value(sim_win->do_cars);}
    }
  }
  code {Fl::focus(sim_win);} {}
} 
